{"ast":null,"code":"import _defineProperty from \"/media/mayukh/Data/storage/repositories/repos/Mayukhdeb.github.io/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"/media/mayukh/Data/storage/repositories/repos/Mayukhdeb.github.io/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/* @jsxRuntime classic */\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\n/* @jsxFrag mdx.Fragment */\n\nimport withLayout from 'nextra-theme-blog';\nimport { withSSG } from 'nextra/ssg';\nimport layoutConfig from '/media/mayukh/Data/storage/repositories/repos/Mayukhdeb.github.io/theme.config.js';\n\nvar MDXLayout = function NextraPage(props) {\n  return withSSG(withLayout({\n    filename: \"pages.md\",\n    route: \"/posts/pages\",\n    meta: {\n      \"title\": \"Next.js Pages\",\n      \"date\": \"2021/3/18\",\n      \"description\": \"Learn more about Next.js pages.\",\n      \"tag\": \"web development\",\n      \"author\": \"You\"\n    },\n    pageMap: [{\n      \"name\": \"_app\",\n      \"route\": \"/_app\"\n    }, {\n      \"name\": \"_document\",\n      \"route\": \"/_document\"\n    }, {\n      \"name\": \"index\",\n      \"route\": \"/\",\n      \"frontMatter\": {\n        \"type\": \"page\",\n        \"title\": \"About\",\n        \"date\": \"2021-03-19T00:00:00.000Z\"\n      }\n    }, {\n      \"name\": \"photos\",\n      \"route\": \"/photos\",\n      \"frontMatter\": {\n        \"type\": \"page\",\n        \"title\": \"Photos\",\n        \"date\": \"2021-03-18T00:00:00.000Z\"\n      }\n    }, {\n      \"name\": \"posts\",\n      \"children\": [{\n        \"name\": \"index\",\n        \"route\": \"/posts\",\n        \"frontMatter\": {\n          \"type\": \"posts\",\n          \"title\": \"Posts\",\n          \"date\": \"2021-03-18T00:00:00.000Z\"\n        }\n      }, {\n        \"name\": \"markdown\",\n        \"route\": \"/posts/markdown\",\n        \"frontMatter\": {\n          \"title\": \"Markdown Examples\",\n          \"date\": \"2021/3/19\",\n          \"description\": \"View examples of all possible Markdown options.\",\n          \"tag\": \"web development\",\n          \"author\": \"You\"\n        }\n      }, {\n        \"name\": \"pages\",\n        \"route\": \"/posts/pages\",\n        \"frontMatter\": {\n          \"title\": \"Next.js Pages\",\n          \"date\": \"2021/3/18\",\n          \"description\": \"Learn more about Next.js pages.\",\n          \"tag\": \"web development\",\n          \"author\": \"You\"\n        }\n      }],\n      \"route\": \"/posts\"\n    }, {\n      \"name\": \"tags\",\n      \"children\": [{\n        \"name\": \"[tag]\",\n        \"route\": \"/tags/[tag]\",\n        \"frontMatter\": {\n          \"type\": \"tag\",\n          \"title\": \"Tagged Posts\"\n        }\n      }],\n      \"route\": \"/tags\"\n    }]\n  }, layoutConfig))(props);\n};\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _objectSpread({\n    components: components\n  }, props), mdx(\"h1\", null, \"Next.js Pages\"), mdx(\"p\", null, \"In Next.js, a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"page\"), \" is a \", mdx(\"a\", {\n    href: \"https://reactjs.org/docs/components-and-props.html\",\n    parentName: \"p\"\n  }, \"React Component\"), \" exported from a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".js\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".jsx\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".ts\"), \", or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".tsx\"), \" file in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pages\"), \" directory. Each page is associated with a route based on its file name.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Example\"), \": If you create \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pages/about.js\"), \" that exports a React component like below, it will be accessible at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/about\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"function About() {\\n  return <div>About</div>\\n}\\n\\nexport default About\\n\")), mdx(\"h3\", null, \"Pages with Dynamic Routes\"), mdx(\"p\", null, \"Next.js supports pages with dynamic routes. For example, if you create a file called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pages/posts/[id].js\"), \", then it will be accessible at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"posts/1\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"posts/2\"), \", etc.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"To learn more about dynamic routing, check the \", mdx(\"a\", {\n    href: \"/docs/routing/dynamic-routes.md\",\n    parentName: \"p\"\n  }, \"Dynamic Routing documentation\"), \".\")), mdx(\"h2\", null, \"Pre-rendering\"), mdx(\"p\", null, \"By default, Next.js \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"pre-renders\"), \" every page. This means that Next.js generates HTML for each page in advance, instead of having it all done by client-side JavaScript. Pre-rendering can result in better performance and SEO.\"), mdx(\"p\", null, \"Each generated HTML is associated with minimal JavaScript code necessary for that page. When a page is loaded by the browser, its JavaScript code runs and makes the page fully interactive. (This process is called \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"hydration\"), \".)\"), mdx(\"h3\", null, \"Two forms of Pre-rendering\"), mdx(\"p\", null, \"Next.js has two forms of pre-rendering: \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Static Generation\"), \" and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Server-side Rendering\"), \". The difference is in \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"when\"), \" it generates the HTML for a page.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    href: \"#static-generation-recommended\",\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"Static Generation (Recommended)\")), \": The HTML is generated at \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"build time\"), \" and will be reused on each request.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    href: \"#server-side-rendering\",\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"Server-side Rendering\")), \": The HTML is generated on \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"each request\"), \".\")), mdx(\"p\", null, \"Importantly, Next.js lets you \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"choose\"), \" which pre-rendering form you'd like to use for each page. You can create a \\\"hybrid\\\" Next.js app by using Static Generation for most pages and using Server-side Rendering for others.\"), mdx(\"p\", null, \"We \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"recommend\"), \" using \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Static Generation\"), \" over Server-side Rendering for performance reasons. Statically generated pages can be cached by CDN with no extra configuration to boost performance. However, in some cases, Server-side Rendering might be the only option.\"), mdx(\"p\", null, \"You can also use \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Client-side Rendering\"), \" along with Static Generation or Server-side Rendering. That means some parts of a page can be rendered entirely by client side JavaScript. To learn more, take a look at the \", mdx(\"a\", {\n    href: \"/docs/basic-features/data-fetching.md#fetching-data-on-the-client-side\",\n    parentName: \"p\"\n  }, \"Data Fetching\"), \" documentation.\"), mdx(\"h2\", null, \"Static Generation (Recommended)\"), mdx(\"p\", null, \"If a page uses \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Static Generation\"), \", the page HTML is generated at \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"build time\"), \". That means in production, the page HTML is generated when you run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"next build\"), \" . This HTML will then be reused on each request. It can be cached by a CDN.\"), mdx(\"p\", null, \"In Next.js, you can statically generate pages \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"with or without data\"), \". Let's take a look at each case.\"), mdx(\"h3\", null, \"Static Generation without data\"), mdx(\"p\", null, \"By default, Next.js pre-renders pages using Static Generation without fetching data. Here's an example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"function About() {\\n  return <div>About</div>\\n}\\n\\nexport default About\\n\")), mdx(\"p\", null, \"Note that this page does not need to fetch any external data to be pre-rendered. In cases like this, Next.js generates a single HTML file per page during build time.\"), mdx(\"h3\", null, \"Static Generation with data\"), mdx(\"p\", null, \"Some pages require fetching external data for pre-rendering. There are two scenarios, and one or both might apply. In each case, you can use a special function Next.js provides:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Your page \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"content\"), \" depends on external data: Use \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"getStaticProps\"), \".\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Your page \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"paths\"), \" depend on external data: Use \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"getStaticPaths\"), \" (usually in addition to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"getStaticProps\"), \").\")), mdx(\"h4\", null, \"Scenario 1: Your page \", mdx(\"strong\", {\n    parentName: \"h4\"\n  }, \"content\"), \" depends on external data\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Example\"), \": Your blog page might need to fetch the list of blog posts from a CMS (content management system).\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"// TODO: Need to fetch `posts` (by calling some API endpoint)\\n//       before this page can be pre-rendered.\\nfunction Blog({ posts }) {\\n  return (\\n    <ul>\\n      {posts.map((post) => (\\n        <li>{post.title}</li>\\n      ))}\\n    </ul>\\n  )\\n}\\n\\nexport default Blog\\n\")), mdx(\"p\", null, \"To fetch this data on pre-render, Next.js allows you to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"export\"), \" an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"async\"), \" function called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getStaticProps\"), \" from the same file. This function gets called at build time and lets you pass fetched data to the page's \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"props\"), \" on pre-render.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"function Blog({ posts }) {\\n  // Render posts...\\n}\\n\\n// This function gets called at build time\\nexport async function getStaticProps() {\\n  // Call an external API endpoint to get posts\\n  const res = await fetch('https://.../posts')\\n  const posts = await res.json()\\n\\n  // By returning { props: { posts } }, the Blog component\\n  // will receive `posts` as a prop at build time\\n  return {\\n    props: {\\n      posts\\n    }\\n  }\\n}\\n\\nexport default Blog\\n\")), mdx(\"p\", null, \"To learn more about how \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getStaticProps\"), \" works, check out the \", mdx(\"a\", {\n    href: \"/docs/basic-features/data-fetching.md#getstaticprops-static-generation\",\n    parentName: \"p\"\n  }, \"Data Fetching documentation\"), \".\"), mdx(\"h4\", null, \"Scenario 2: Your page paths depend on external data\"), mdx(\"p\", null, \"Next.js allows you to create pages with \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"dynamic routes\"), \". For example, you can create a file called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pages/posts/[id].js\"), \" to show a single blog post based on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"id\"), \". This will allow you to show a blog post with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"id: 1\"), \" when you access \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"posts/1\"), \".\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"To learn more about dynamic routing, check the \", mdx(\"a\", {\n    href: \"/docs/routing/dynamic-routes.md\",\n    parentName: \"p\"\n  }, \"Dynamic Routing documentation\"), \".\")), mdx(\"p\", null, \"However, which \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"id\"), \" you want to pre-render at build time might depend on external data.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Example\"), \": suppose that you've only added one blog post (with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"id: 1\"), \") to the database. In this case, you'd only want to pre-render \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"posts/1\"), \" at build time.\"), mdx(\"p\", null, \"Later, you might add the second post with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"id: 2\"), \". Then you'd want to pre-render \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"posts/2\"), \" as well.\"), mdx(\"p\", null, \"So your page \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"paths\"), \" that are pre-rendered depend on external data**.** To handle this, Next.js lets you \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"export\"), \" an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"async\"), \" function called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getStaticPaths\"), \" from a dynamic page (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pages/posts/[id].js\"), \" in this case). This function gets called at build time and lets you specify which paths you want to pre-render.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"// This function gets called at build time\\nexport async function getStaticPaths() {\\n  // Call an external API endpoint to get posts\\n  const res = await fetch('https://.../posts')\\n  const posts = await res.json()\\n\\n  // Get the paths we want to pre-render based on posts\\n  const paths = posts.map((post) => ({\\n    params: { id: post.id }\\n  }))\\n\\n  // We'll pre-render only these paths at build time.\\n  // { fallback: false } means other routes should 404.\\n  return { paths, fallback: false }\\n}\\n\")), mdx(\"p\", null, \"Also in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pages/posts/[id].js\"), \", you need to export \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getStaticProps\"), \" so that you can fetch the data about the post with this \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"id\"), \" and use it to pre-render the page:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"function Post({ post }) {\\n  // Render post...\\n}\\n\\nexport async function getStaticPaths() {\\n  // ...\\n}\\n\\n// This also gets called at build time\\nexport async function getStaticProps({ params }) {\\n  // params contains the post `id`.\\n  // If the route is like /posts/1, then params.id is 1\\n  const res = await fetch(`https://.../posts/${params.id}`)\\n  const post = await res.json()\\n\\n  // Pass post data to the page via props\\n  return { props: { post } }\\n}\\n\\nexport default Post\\n\")), mdx(\"p\", null, \"To learn more about how \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getStaticPaths\"), \" works, check out the \", mdx(\"a\", {\n    href: \"/docs/basic-features/data-fetching.md#getstaticpaths-static-generation\",\n    parentName: \"p\"\n  }, \"Data Fetching documentation\"), \".\"), mdx(\"h3\", null, \"When should I use Static Generation?\"), mdx(\"p\", null, \"We recommend using \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Static Generation\"), \" (with and without data) whenever possible because your page can be built once and served by CDN, which makes it much faster than having a server render the page on every request.\"), mdx(\"p\", null, \"You can use Static Generation for many types of pages, including:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Marketing pages\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Blog posts\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"E-commerce product listings\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Help and documentation\")), mdx(\"p\", null, \"You should ask yourself: \\\"Can I pre-render this page \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ahead\"), \" of a user's request?\\\" If the answer is yes, then you should choose Static Generation.\"), mdx(\"p\", null, \"On the other hand, Static Generation is \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"not\"), \" a good idea if you cannot pre-render a page ahead of a user's request. Maybe your page shows frequently updated data, and the page content changes on every request.\"), mdx(\"p\", null, \"In cases like this, you can do one of the following:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use Static Generation with \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Client-side Rendering:\"), \" You can skip pre-rendering some parts of a page and then use client-side JavaScript to populate them. To learn more about this approach, check out the \", mdx(\"a\", {\n    href: \"/docs/basic-features/data-fetching.md#fetching-data-on-the-client-side\",\n    parentName: \"li\"\n  }, \"Data Fetching documentation\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Server-Side Rendering:\"), \" Next.js pre-renders a page on each request. It will be slower because the page cannot be cached by a CDN, but the pre-rendered page will always be up-to-date. We'll talk about this approach below.\")), mdx(\"h2\", null, \"Server-side Rendering\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Also referred to as \\\"SSR\\\" or \\\"Dynamic Rendering\\\".\")), mdx(\"p\", null, \"If a page uses \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Server-side Rendering\"), \", the page HTML is generated on \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"each request\"), \".\"), mdx(\"p\", null, \"To use Server-side Rendering for a page, you need to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"export\"), \" an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"async\"), \" function called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getServerSideProps\"), \". This function will be called by the server on every request.\"), mdx(\"p\", null, \"For example, suppose that your page needs to pre-render frequently updated data (fetched from an external API). You can write \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getServerSideProps\"), \" which fetches this data and passes it to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Page\"), \" like below:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"function Page({ data }) {\\n  // Render data...\\n}\\n\\n// This gets called on every request\\nexport async function getServerSideProps() {\\n  // Fetch data from external API\\n  const res = await fetch(`https://.../data`)\\n  const data = await res.json()\\n\\n  // Pass data to the page via props\\n  return { props: { data } }\\n}\\n\\nexport default Page\\n\")), mdx(\"p\", null, \"As you can see, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getServerSideProps\"), \" is similar to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getStaticProps\"), \", but the difference is that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getServerSideProps\"), \" is run on every request instead of on build time.\"), mdx(\"p\", null, \"To learn more about how \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getServerSideProps\"), \" works, check out our \", mdx(\"a\", {\n    href: \"/docs/basic-features/data-fetching.md#getserversideprops-server-side-rendering\",\n    parentName: \"p\"\n  }, \"Data Fetching documentation\")), mdx(\"h2\", null, \"Summary\"), mdx(\"p\", null, \"We've discussed two forms of pre-rendering for Next.js.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Static Generation (Recommended):\"), \" The HTML is generated at \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"build time\"), \" and will be reused on each request. To make a page use Static Generation, either export the page component, or export \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"getStaticProps\"), \" (and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"getStaticPaths\"), \" if necessary). It's great for pages that can be pre-rendered ahead of a user's request. You can also use it with Client-side Rendering to bring in additional data.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Server-side Rendering:\"), \" The HTML is generated on \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"each request\"), \". To make a page use Server-side Rendering, export \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"getServerSideProps\"), \". Because Server-side Rendering results in slower performance than Static Generation, use this only if absolutely necessary.\")));\n}\n\nMDXContent.isMDXComponent = true;\nexport default MDXContent;","map":null,"metadata":{},"sourceType":"module"}